//Addressable 로드 로직
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.AddressableAssets;
using UnityEngine.ResourceManagement.AsyncOperations;
using System;
using Object = UnityEngine.Object;

public class ResourceManager
{
  Dictionary<string, UnityEngine.Object> _resources = new Dictionary<string, UnityEngine.Object>();

// 내가 쓸 로드가 완료 된 리소스를 불러올 때 코드
  public T Load<T>(string key) where T:Object
  {
   if(_resources.TryGetValue(key, out Object resource))
     return resource as T;

    return null;
  }
// 로드 된 GameObject를 생성시킬 때 코드
  public GameObject Instantiate(string key, Transform parent = null, bool pooling = false)
  {
    GameObject prefab =Load<GameObject>($"{key}");
    if(prefab == null)
      {
       Debug.Log($"{Failed to load prefab : {key}}");
       return null;
      }

    GameObject go = Object.Instantiate(prefab,parent);
    go.name = prefab.name;
    return go;
  }
// 생성 된 오브젝트 삭제 코드
  public void Destroy(GameObject go)
  {
    if(go == null)
      return;
    Object.Destroy(go);
  }
  
  //하나의 리소를 로드 하는 코드
  public void LoadAsync<T>(string key, Action<T> callback = null ) where T:UnityEngine.Object
  {
    if(_resources.TryGetValue(key, out Object resource))
      {
      callback?.Invoke(resource as T)
      return;
      }

    var asyncOperation = Addressables.LoadAssetAsync<T>(key);
    asyncOperation.Completed +=(op)=>
    {
      _resources.Add(key,op.Result);
      callback?.Invoke(op.Result);
    };
  }
  // 특정 라벨의 리소스들 전체를 끌고 온 뒤 하나씩 로드하는 코드
  public void LoadAllAsync<T>(string label, Action<string,int,int> callback) where T :UnityEngine.Object
  {
    var opHandle =Addressables.LoadResourceLocationsAsync(label, typeof(T));
    opHandle.Completed += (op) =>
    {
      int loadCount =0;
      int totalCount =op.Result.Count;
      foreach(var result in op.Result)
      {
        LoadAsync<T>(result.PrimaryKey,(obj)=>
        {
          loadCount++;
          callback?.Invoke(result.PrimaryKey,loadCount, totalCount);
        });
      }
    }
  }
}

